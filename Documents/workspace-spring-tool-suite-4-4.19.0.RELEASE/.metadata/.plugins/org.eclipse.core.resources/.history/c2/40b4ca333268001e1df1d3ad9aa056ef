package lv.vaits.user.confs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import lv.vaits.user.services.users.impl.MyUserDetailsManagerImpl;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public WebSecurityCustomizer webSecurityCustomizer() {
		return (web) -> web.ignoring().requestMatchers(new AntPathRequestMatcher("/h2-console/**"));
	}

	//@Bean
	//public MyUserDetailsManagerImpl userDetailsManager() {
//	MyUserDetailsManagerImpl manager = new MyUserDetailsManagerImpl();
	//	return manager;
//	}

	//@Bean
	//PasswordEncoder passwordEncoderSimple2() {
	//	return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	//}

	//@Bean
	//public AuthenticationManager authManager(HttpSecurity http) throws Exception {

	//	AuthenticationManagerBuilder authenticationManagerBuilder = http
	//			.getSharedObject(AuthenticationManagerBuilder.class);

	//	authenticationManagerBuilder.userDetailsService(userDetailsManager()).passwordEncoder(passwordEncoderSimple2());
	//	return authenticationManagerBuilder.build();
	//}

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

		http.authorizeHttpRequests()
		.requestMatchers("/h2-console").permitAll().requestMatchers("/h2-console/**").permitAll()
		.dispatcherTypeMatchers(jakarta.servlet.DispatcherType.FORWARD).permitAll().and().formLogin()
		.permitAll().and().logout().permitAll().and().exceptionHandling().accessDeniedPage("/my-access-denied");

		return http.build();
	}

}
